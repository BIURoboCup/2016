#version 330

//*********************************************************
//			INPUT, OUTPUT
//*********************************************************

// The particles from last time, and it's size 
//	(which is the weight from last time)

layout(location = 0) in vec3 oldParticle;
layout(location = 4) in float oldWeight; 

// The new data:
//	1) Particle may move according to motor data.
//	2) Weight change due to new reports.
out vec3 outa;
out float outb;

// The flag to decide if we calculation weight or resampling:
uniform bool step;


//*********************************************************
//			Weight calculation with Zt Ut
//*********************************************************

struct Report {
	float dis;	// Distance 
	float rad;	// Radians!
	float type;	// L,T,C,+
};

struct MotorInfo {
	float dis;
	float rad;
};

uniform vec2 POIs[30]; // All the POIs (x,y)

// All the report\movment data.
// Since we must use constant arrays in glsl_3.3 we use upper
//		bound of 30, and we will pass the real count with `reportCount`;
uniform int 		reportCount;
uniform Report 		reports[30];
uniform MotorInfo	movementInfo;

//*********************************************************
//			Resampling new particles
//*********************************************************

// After calculation w_i we need to resample.
uniform int M;
uniform float accWeight[100];

//*********************************************************
//			INPUT, OUTPUT
//*********************************************************

// General weight function:
// all angles must be in radians!
float dcoeff = 0.1f;			    
float tcoeff = 10.0f;
float w(
	float reportDistance,
	float reportAngle,
	vec3 p,
	int POIindex) {
// The coeff are based on weight trying to find good fit.
float	d =  dcoeff *  abs(reportDistance -  distance(POIs[POIindex],p.xy));
float	t =  tcoeff *  abs(
					reportAngle  
					- atan(POIs[POIindex].y - p.y,POIs[POIindex].x - p.x)
					- p.z // angle in radians.
							);
return exp(-d-t);
}

//*********************************************************
//	Weight per report. Generated with : `printShaderInfo();`
//*********************************************************

// Return weight of particle regarding all known ALL values:
float ALLReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[27] = int[] (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26);
	for (int i =0; i < 27; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}

// Return weight of particle regarding all known L values:
float LReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[12] = int[] (4,6,7,9,11,12,15,17,18,20,22,23);
	for (int i =0; i < 12; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}

// Return weight of particle regarding all known T values:
float TReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[10] = int[] (1,2,5,8,10,13,16,19,21,24);
	for (int i =0; i < 10; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}

// Return weight of particle regarding all known D values:
float DReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[2] = int[] (3,14);
	for (int i =0; i < 2; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}

// Return weight of particle regarding all known P values:
float PReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[2] = int[] (25,26);
	for (int i =0; i < 2; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}

// Return weight of particle regarding all known C values:
float CReport(int reportIndex) {
	float _w = 0.0f;
	Report _r = reports[reportIndex];
	int _POIs[1] = int[] (0);
	for (int i =0; i < 1; i++) {
		_w = _w +
			w(
				_r.dis,
				_r.rad,
				oldParticle,
				_POIs[i]
			);
	}
	return _w;
}



//*********************************************************
//			INPUT, OUTPUT
//*********************************************************



void main(void)
{
	float _newW;
	if (!step) {
		//calculate
	}else {
		// resample
	}


	outa = vec3(0.0f);
	outb = 0.0f;
}
